#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# .bashrc_p4
# Stephen Niedzielski
# Copyright 2011 Stephen Niedzielski. Licensed under GPLv3+.

# ------------------------------------------------------------------------------
export P4CONFIG=.p4config

# ------------------------------------------------------------------------------
# P4 Sed Magic
# Helps cope with the wildly differing output of P4. The only reliable way to
# make a nice wrapper would be to use marshal Python objects, but that's too
# involved.

# Escape reserved characters in filenames. There's only a small table of
# characters listed in documentation, so there's some confidence this should
# work pretty consistently.
alias p4se="sed -r 's_%_%25_g;s_@_%40_g;s_\\#_%23_g;s_\\*_%2A_g'"
alias p4sd="sed -r 's_(.*)#[0-9]+ - .*_\1_'"
alias p4sdv="sed -r 's_(.*#[0-9]+) - .*_\1_'"

# ------------------------------------------------------------------------------
p4_client_root() { p4 info|sed -rn 's_Client root: (.*)_\1_p'; }
p4_client_name() { p4 info|sed -rn 's_Client name: (.*)_\1_p'; }
p4_client_view() { p4 client -o "$@"|sed -rn '1,/^View:$/ d;s%^\t%%p'; }
p4_logged_in()   { p4 login -s > /dev/null; }
p4_user() { p4 info|sed -rn '1s/^User name: (.*)/\1/p'; }

# Diff two clients but account for name differences.
p4_diff_client()
{
  p4_logged_in || return

  local lhs="$1"
  local rhs="${2:-$(p4_client_name)}"

  # Temp files.
  local lhs_file="$(mktemp)"
  local rhs_file="$(mktemp)"

  p4 client -o "$lhs"|sed -r "s%$lhs%CLIENT%g" >| "$lhs_file"
  p4 client -o "$rhs"|sed -r "s%$rhs%CLIENT%g" >| "$rhs_file"

  diff "$lhs_file" "$rhs_file"
  rm -f "$lhs_file" "$rhs_file"
}

# TODO: need workaround for "p4 diff -sl" which incorrectly reports files opened
# for delete.
# TODO: confirm "p4 diff -sl" checks "-sb" and other cases. check for opened but
# missing added files, branched but changed, etc.
# Reconcile client directories recursively with server. My best reasonable
# attempt to implement something like "git status".
p4_status()
{
  p4_logged_in || return

  # TODO: try to handle all dirs in one go.
  for d in "${@:-$(p4_client_root)}"
  do
    # 1: dump differing and missing files. Bin stderr -- handles empty
    # synchronization case.
    p4 diff -sl "$d"/... 2> /dev/null |
    grep -Ev '^same '
  
    # 2: check for unopened but added files.
  
    # Dump all files, links, and empty directories.
    find "$d" \( -type f -o -type l -o -type d -empty \)|
  
    # Escape reserved characters in filenames.
    p4se|
  
    # Suppress have files. Reformat added files from stderr.
    p4 -x- have 2>&1 > /dev/null|
    sed -r 's%(.*) - file\(s\) not on client\.$%\1%'|
  
    # Prune out files opened for add.
    p4 -x- opened 2>&1 > /dev/null|
    sed -r 's%(.*) - file\(s\) not opened on this client\.$%add \1%'
  done

  : # Can't say much about exit status.
}

# p4_status|p4 -x- have|sed ...|p4 -x- sync -q


# Workaround for maxing maxresults.
# TODO: the best solution here would be just to iterate over client directories
# and sync. In this way, there's no worry about ordering and you can actually
# parallelize the sync.
p4_sync_client()
{
  p4_client_view|
  sed -rn 's_\t\+?//.* (//.*)_\1_p;'| # Only print included client filespecs.
  xargs -d\\n -n1 -i p4 sync -q '{}'"$1" # Sync each view one at a time.
  # TODO: iterate over args and build hashmap with client file as key using
  # "p4 sync -n"? Then sync.
  # local dash_args=...
  # shift
  # while read file
  # do
  #   for constraint in "${@:-#head}"
  #   do
  #     p4 sync -n "$dash_args" "$file$constraint"|
  #     ...
  #   done
  # done
}

# TODO: tab completion for clients would be super nice.
# $1 template client
# $2 target client
# $3 dir
p4_init()
{
  [[ $# -eq 3 ]] &&
  [[ -n "$P4CONFIG" ]] &&
  p4_logged_in &&

  # Create client directory and enter it.
  mkdir "$3" &&
  cd "$3" &&

  # Templatize from $1 and output result.
  p4 client -ot "$1" "$2" |

  # Adjust new client options and feed back in.
  sed -r 's_(^Options:\t).*_\1allwrite clobber nocompress locked nomodtime rmdir_
          s_(^SubmitOptions:\t).*_\1submitunchanged_
          s_(^LineEnd:\t).*_\1local_' |
  p4 client -i &&

  # 
  echo "P4CLIENT=$2" > "$P4CONFIG"
}





# TODO: make it take CLs or in gen be mroe versatile.
# TODO: just make it output local files...
p4_zip_opened()
{
  p4_logged_in &&

  local dst="$(readlink -m $1)" &&
  mkdir "$dst" &&

  local root="$(p4_client_root)" &&
  pushd "$root" > /dev/null &&

  {
    p4 opened|
    p4sd|
    p4 -x- fstat -T clientFile|
    sed -nr "s%^\.\.\. clientFile $root/%%p"|
    xargs -d\\n cp --parents -t"$dst"
    popd > /dev/null
  }
  # TODO: zip / tar.
}

# mkdir bundle &&
# cd bundle &&
# p4_zip_opened changes &&
#local dst="$1" &&
#mkdir "$dst" &&
#p4 opened|
#grep -Ev ' - add change|delete'|
#p4sdv|
#while read file
#do
  #local
#  out="$dst/$(p4 fstat -T clientFile "$file"|sed -nr "s%^\.\.\. clientFile $root/%%p")"
#  p4 print -qo "$out" "$file"
#done


# mm showcommands
# p4 changes -ssubmitted ./...@\>1000,1020|tr -cd '[:print:]\n'|sed -r 's_Change ([0-9]+) on.*_\1_g'|p4 -x- describe -s
# p4 grep -ie 'cna[mp]|cdnip' ./...@2012/03/01,now
# p4 changes -i //foo/Cdma....java#11,11

