#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# .bashrc_android
# Stephen Niedzielski
# Copyright 2011 Stephen Niedzielski. Licensed under GPLv3+.

# ------------------------------------------------------------------------------
alias logcat='adb logcat -v long'

# ------------------------------------------------------------------------------
dump_apk_cert() { unzip -p "$1" META-INF/CERT.RSA; }
# TODO: support keystore.
# platform.x509.pem
# $(gettop)/extension/security
# $(gettop)/build/target/product/security
check_apk_cert()
{
  local pem="$1"
  local apk="$2"

  dump_apk_cert "$apk"|
  openssl pkcs7 -inform DER -outform PEM -print_certs|
  diff "$pem" -
}
# TODO: dumpapk
#jarsigner -verbose -verify -certs
export USE_CCACHE=1
export CCACHE_DIR=~/.ccache
# NDK CCACHE?

alias apktool='java -jar ~/opt/apktool/apktool.jar'
alias signapk='java -jar ~/opt/signapk/signapk.jar' # TODO: i need to add some more files here.



# TODO: Eclipse minimal platform debugging setup. Add debug recur, search for mult.
dump_eclipse_jars()
{
  {
    for dir in \
      out/target/common/obj/JAVA_LIBRARIES/* \
      out/target/common/obj/APPS/* \
      out/target/product/*/obj/JAVA_LIBRARIES/*
    do
      # TODO: best preference?
      for jar in \
        classes-full-debug.jar \
        javalib.jar \
        noproguard.classes.jar \
        classes.jar \
        classes-jarjar.jar \
        "$dir/"*.jar
      do
        local dirjar="$dir/$jar"
        [[ -e "$dirjar" ]] && echo "$dirjar" && break
      done
    done
    find out/target/product/*/system/framework -name \*.jar
  }|sed 's%.*%\t<classpathentry kind="lib" path="\0" sourcepath="android"/>%'
}
# TODO: use ANDROID_PRODUCT_OUT?
# TODO: how to make classpathentry always work with rel paths, even across NFS
# mount.

#insert into logs values('',10);
#seed=0
#rnd_num()
#{
#  printf '%01d%03d%03d%04d' $(( $RANDOM % 10 )) $(( $RANDOM % 1000 )) $(( $RANDOM % 1000 )) $(( $RANDOM % 10000 ))
#}
#local db="/data/data/com.sec.android.provider.logsprovider/databases/logs.db"
#local table=logs
#local id=0
#local rows=200
#local info=echo
#while [[ $id -lt $rows ]]
#do
  # 8|4255622792||695588723805|0|3|0||||||US|Washington||||0|||100|1|0||||||||||||0|||||||
#  $(info) adb shell sqlite3 "$db" "insert into $table values($id,'$(rnd_num)',,);"
#insert into logs values(8,'4253582792',,'695588723805','0','3','0',,,,,,'US','Washington',,,,'0',,,'100','1','0',,,,,,,,,,,,'0',,,,,,,);
#adb shell
#su
#ash
#cd /data
#cp /dbdata/databases/com.sec.android.provider.logsprovider/logs.db kenny.loggins
#chown 2000.2000 kenny.loggins # shell.shell
#exit
#exit
#exit
#adb pull /data/kenny.loggins
# TODO: aapt colorize warnings and errors.
# TODO: study how to enable view server in app when platform doesn't support it.

# export from keystore
# keytool -exportcert -alias exportkey -keystore keystore.ExportKey


# see http://www.kandroid.org/online-pdk/guide/release_keys.html
# platform: a key for packages that are part of the core platform.
# shared: a key for packages that are shared in the home/contacts process.
# media: a key for packages that are part of the media/download system.
# testkey / releasekey: the default key to sign with if not otherwise specified.

to_keystore()
{
  openssl x509 -in $1.x509.pem -text -out $1.txt
  openssl pkcs8 -inform DER -in $1.pk8 -nocrypt -out $1.pem
  openssl pkcs12 -export -in $1.txt -inkey $1.pem -password pass:foobar -name $1 -out $1.pkcs12
  keytool -importkeystore -destkeystore keystore.debug -deststorepass foobar -srckeystore $1.pkcs12 -srcstoretype PKCS12 -srcstorepass foobar
}

#sign apk with keystore
#jarsigner -verbose -keystore keystore.debug foo.apk platform

#key used by some web APIs
# openssl sha1 -binary shared.pem|openssl base64 -out shared.x509.sha1b64

